name: Build Prometheus CLI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        platform: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: false

    - name: Get dependencies
      run: go mod download

    - name: Build
      run: go build -v -o prom-cli-${{ runner.os }}-go${{ matrix.go-version }}${{ runner.os == 'Windows' && '.exe' || '' }} ./cmd/prom-cli

    - name: Test
      run: go test -v ./...

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: prom-cli-${{ runner.os }}-go${{ matrix.go-version }}
        path: prom-cli-${{ runner.os }}-go${{ matrix.go-version }}${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./prom-cli-Linux-go1.22
        asset_name: prom-cli-linux
        asset_content_type: application/octet-stream
        
    - name: Upload Release Assets (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./prom-cli-macOS-go1.22
        asset_name: prom-cli-macos
        asset_content_type: application/octet-stream
        
    - name: Upload Release Assets (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./prom-cli-Windows-go1.22.exe
        asset_name: prom-cli-windows.exe
        asset_content_type: application/octet-stream